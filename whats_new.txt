6.4.2 - ratios in parallel removed since it was crashing (6.3.0)
6.4.1 - custom calcs ardi BUG fix
6.4.0 - custom calcs ardi
6.3.0 - create ratios now in parallel
5.3.2 - GUI bugs and features.
5.3.1 - BUG - page 00 input_df_org is now frozen as of data load and not impacted by sample sizing
5.3.0 - API logging fixed, Notify fixed, Parallel run on  grid search
5.02.1 - bug fix error logging
5.02.0 - API for error logging
5.01.0 - GUI - stable steps 0, 1, 2 with decision trees and settings
5.00.0 - API server, updated requirements
4.00.0 - first GUI
3.20.1 - ram check removed, env fixed
3.20.0 - remove last n rows that does not have enough performance period
3.19.4 - get data API notification small bug
3.19.3 - small bug in paths
3.19.2 - small bug in paths
3.19.1 - definitions - external path - now params, logs, sessions, implemented models can be stored to external to the package path.
3.18.1 - main - calling module.run() is in try:except enable logging of the error
3.18.0 - Push notificats implemented for simulation and API calls
3.17.5 - signal_trade
3.17.4 - grid search winner model session auto moved to implemented models
3.17.3 - columns_to_include moved to self in session manager
3.17.2 - grid search - if sl < tp pass to speedup the simulations
3.17.1 - remove last n rows where there is no enough time/periods to calculate the criterion
3.17.0 - predict - data drift calculation for the new period vs training set
3.16.0 - predict standard flow - local saved predictions.csv includes all features in order to be used for data drift detection
3.15.0 - gridsearch for winning models - new parameters for grid search to produce the training sessions and not to delete them. Start it with run gridsearch winners sh
3.14.6 - load data time pd.datetime removed
3.14.5 - load data - if folder doesnt exists - create. fixing params and adding new ones
3.14.4 - small improvements
3.14.3 - load_data - try except added for storing the data in case some input directory does not exists
3.14.2 - baseloader - accepts argument predict_module to know if it should skip some procedures unneeded for predict
3.14.1 - bugs - predict.sh load_data now with arguments, standard predict session - colum to be saved enriched
3.14.0 - load_data changed to use argumens - volumes and session type to know which API to use
3.13.3 - data load bug fix
3.13.2 - api communication fixed, ration creation small bug fixed (duplicated values in shortlisted columns)
3.13.1 - bug fix ardi data prep flow and gris search
3.13.0 - predict session added
3.12.0 - cap in nb of predictors based on correl - max 50/100 to make the process faster. Check times added in session manager. Api communication module fixed.
3.11.1 - api communication added for posting models.csv and predictions. requirements.txt updated
3.10.1 - bug fix in standard training flow - t1, t2, t3 dfs were without saved columns for predictions per models
3.10.0 - new argument added - specify max nb of features for the tree models
3.9.0 - grid search for modelling - new file that you can run load and after train session for misc combinations of params
3.8.0 - prediction flow added. .prepare() moved to main.py to avoid duplicated preparations. start_logging as well.
3.7.4 - hardcoded values removed
3.7.3 - bug in additional files merging - date with object merging in dev_ardi
3.7.2 - updated requirements
3.7.1 - missing added uint8, period[T], period[M]
3.7.0 - checking if 50GB ram is available at the start, many in undersampling logical bugs fixed.
3.6.0 - multiprocess - merging now in loop for different periods - dev process
3.5.0 - first multiprocess created
3.4.2 - opt bin is run only if specified in params to speedup the process. Removed columns during missing treatment are removed from final features before saving them.
3.4.1 - zscore in outlies is now absolute value in terms of threshold
3.4.0 - treating outliers added in data load prep flow.
3.3.3 - opt binning is again with multiproc. THe issue is - now there are much more columns and opt bin is running slowly. small print cleans done. Dev data prepr flow created for faster runs on development.
3.3.2 - opt binning is no multiprocessing due to performance issues
3.3.1 - opt binning is now with multiproc. ZAEBI!!!!
3.3.0 - opotimal binning recoded as class and now with 5 paralelized workers - multiporcess pool map. Date features added. Training modelling also multiprocess
3.2.0 - updated gitignore
3.1.0 - refactoring. functions split in separated files for easier code editing
3.0.0 - refactoring. brain new structure with objects.
2.0.0 - refactoring. Definitions.py added.
1.3.0 - docs updated - missing treatment
1.2.0 - requirements updated
1.1.0 - main.py and dataload - 2 classes created - session (all session details), loader - 2 dataframes. Requirements updated
1.0.0 - initial stable version